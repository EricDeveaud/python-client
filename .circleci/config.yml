version: 2
jobs:
  tests:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/tests
    steps:
      - checkout:
          path: /tmp/src/templateflow

      - restore_cache:
          keys:
            - deps-v3-{{ checksum "/tmp/src/templateflow/requirements.txt"}}-{{ epoch }}
            - deps-v3-{{ checksum "/tmp/src/templateflow/requirements.txt"}}-
            - deps-v3-

      - run:
          name: Get TemplateFlow Zip package
          command: |
            if [[ ! -d "/tmp/data/templateflow" ]]; then
              mkdir -p /tmp/data/templateflow
              curl "https://files.osf.io/v1/resources/ue5gx/providers/osfstorage/?zip=" -o templateflow.zip
              unzip templateflow.zip -d /tmp/data/templateflow
            fi

      - run:
          name: Prepare environment
          command: |
            pyenv global 3.5.2
            virtualenv venv
            pip install -U pip
            pip install -r /tmp/src/templateflow/requirements.txt
            pip install datalad
            pip install "setuptools>=27.0" twine

      - run:
          name: Install git and git-annex
          command: |
            if [[ ! -e "/tmp/cache/git-annex-standalone.tar.gz" ]]; then
              wget -O- http://neuro.debian.net/lists/trusty.us-ca.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
              sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9
              sudo apt update && sudo apt-get install -y --no-install-recommends git-annex-standalone
              mkdir -p /tmp/cache
              tar czvf /tmp/cache/git-annex-standalone.tar.gz /usr/bin/git-annex /usr/bin/git-annex-shell /usr/lib/git-annex.linux
            else
              sudo tar xzfv /tmp/cache/git-annex-standalone.tar.gz -C /
            fi
            git config --global user.name "First Last"
            git config --global user.email "email@domain.com"

      - save_cache:
          key: deps-v3-{{ checksum "/tmp/src/templateflow/requirements.txt"}}-{{ epoch }}
          paths:
            - "/opt/circleci/.pyenv/versions/3.5.2"
            - "/tmp/data/templateflow"
            - "/tmp/cache"

      - run:
          name: Run tests (w/ DataLad)
          environment:
            TEMPLATEFLOW_USE_DATALAD: 1
          command: |
            unset TEMPLATEFLOW_HOME
            pyenv global 3.5.2
            virtualenv venv
            pytest -vsx --doctest-modules /tmp/src/templateflow/templateflow

      - run:
          name: Update TemplateFlow skeleton
          command: |
            cd $HOME/.cache/templateflow/
            find . -type d -not -path "*/\.*" -exec mkdir -p /tmp/skel/{} \;
            for i in $( find . -type f -not -path "*/\.*" ); do cp $i /tmp/skel/${i:2}; done
            find . -type l -not -path "*/\.*" -exec touch /tmp/skel/{} \;
            cd /tmp/skel
            mkdir -p /tmp/resources
            zip -r /tmp/resources/templateflow-skel.zip */

      - store_artifacts:
          path: /tmp/resources/templateflow-skel.zip

      - run:
          name: Run tests (w/o DataLad)
          environment:
            TEMPLATEFLOW_USE_DATALAD: 0
            TEMPLATEFLOW_HOME: "/tmp/data/templateflow"
          command: |
            pyenv global 3.5.2
            virtualenv venv
            export TEMPLATEFLOW_HOME="/tmp/data/templateflow"
            pytest -vsx --doctest-modules /tmp/src/templateflow/templateflow

      - run:
          name: Run tests (pulling from S3)
          environment:
            TEMPLATEFLOW_USE_DATALAD: 0
            TEMPLATEFLOW_HOME: "/tmp/data/templateflow-S3"
          command: |
            pyenv global 3.5.2
            virtualenv venv
            pytest -vsx --doctest-modules /tmp/src/templateflow/templateflow

      - run:
          name: Run tests (w/ DataLad, bypassed via S3)
          environment:
            TEMPLATEFLOW_USE_DATALAD: 1
            TEMPLATEFLOW_HOME: /home/circleci/.cache/templateflow-init
          command: |
            pyenv global 3.5.2
            virtualenv venv
            cd /tmp/src/templateflow
            pip install -e .
            python -c "from templateflow import api"
            export TEMPLATEFLOW_USE_DATALAD=0
            pytest -vsx --doctest-modules /tmp/src/templateflow/templateflow

      - run:
          name: Test packaging
          command: |
            pyenv global 3.5.2
            virtualenv venv
            cd /tmp/src/templateflow
            echo "${CIRCLE_TAG}" > templateflow/VERSION
            echo "include templateflow/VERSION" >> MANIFEST.in
            python setup.py sdist
            twine check dist/*

      - persist_to_workspace:
          root: /tmp
          paths:
            - resources

  deploy_pypi:
    machine:
      image: circleci/classic:201711-01
    working_directory: /tmp/src/templateflow
    steps:
      - attach_workspace:
          at: /tmp

      - checkout:
          path: /tmp/src/templateflow

      - restore_cache:
          keys:
            - deps-v3-{{ checksum "/tmp/src/templateflow/requirements.txt"}}-{{ epoch }}
            - deps-v3-{{ checksum "/tmp/src/templateflow/requirements.txt"}}-
            - deps-v3-

      - run:
          name: Deploy to PyPi
          command: |
            pyenv global 3.5.2
            virtualenv venv
            pip install "setuptools>=27.0" twine
            cp /tmp/resources/templateflow-skel.zip templateflow/conf/
            echo "${CIRCLE_TAG}" > templateflow/VERSION
            echo "include templateflow/VERSION" >> MANIFEST.in
            python setup.py sdist
            twine check dist/*
            twine upload dist/*

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - tests:
          filters:
            tags:
              only: /.*/
      - deploy_pypi:
          requires:
            - tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
